from math import log10

#Variables globales
Lc_D = 30           #Longitud del codo/Diámetro del codo (tabla)
D = 0.0266         #Diametro de la tubería A
A = 5.574*10**(-4) #Área transversal
fat= 0.022          #Coeficiente de fricción para codos (tabla)
vk = 1.15*10**(-6)  #viscocidad cinemática (tabla)
g = 9.81            #Aceleración gravitacional
D_e = D/(4.6*10**(-5))

#Variables tubería A
codosA = 2          #Cantidad de codos
k1 = 4              #Coeficiente de restricción (proporcionado por el ejercicio)
La = 12             #Longitud de la tubería A

#Variables tubería B
codosB = 0          #Cantidad de codos
k2 = 8              #Coeficiente de restricción (proporcionado por el ejercicio)
Lb = 6              #Longitud de la tubería B

#Variables tubería C
codosC = 2
k3 = 12
Lc = 12

#Función
def h(Q, codos, coefK, length):
    Nr = ((Q)* D)/(A * vk)      #Número de reynolds para tubería A
    f = 0.25/((log10(1/(3.7*D_e)+5.74/(Nr**0.9)))**2) #Coeficiente de fricción para la tubería
    k = ((codos*fat*Lc_D) / (2*g*A**2)) + (coefK / (2*g*A**2)) + ((f*length) / (D*2*g*A**2))
    return ( k*Q**2, k)

#Algoritmo
def Q_s(est1, est2, est3, est0):
  if (est1+est2+est3)!=est0:
    print(est1+est2+est3)
    raise TypeError(f'Las estimaciones deben sumar exactamente {str(est0)}')
  else:
    ha = h(est1, codosA, k1, La)
    hb = h(est2, codosB, k2, Lb)
    hc = h(est3, codosC, k3, Lc)

    dQ1 = (ha[0]-hb[0])/(2*ha[1]*est1 + 2*hb[1]*est2)
    dQ2 = (hb[0]-hc[0])/(2*hb[1]*est2 + 2*hc[1]*est3)

    Qa = (ha[0]/ha[1])**0.5
    Qb = (hb[0]/hb[1])**0.5
    Qc = (hc[0]/hc[1])**0.5

    while((abs(dQ1)/abs(Qa) > 0.01) or ((abs(dQ2)+abs(dQ1))/abs(Qb) > 0.01) or (abs(dQ2)/abs(Qc) > 0.01)):
        est1-=dQ1
        est2+=(dQ1-dQ2)
        est3=(-est3-dQ2)
        ha = h(est1, codosA, k1, La)
        hb = h(est2, codosB, k2, Lb)
        hc = h(est3, codosC, k3, Lc)

        Qa = (ha[0]/ha[1])**0.5
        Qb = (hb[0]/hb[1])**0.5
        Qc = (hc[0]/hc[1])**0.5

        dQ1 = (ha[0]-hb[0])/((2*ha[1]*est1) + (2*hb[1]*est2))
        dQ2 = (hb[0]-hc[0])/((2*hb[1]*est2) + (2*hc[1]*est3))
    return(Qa,Qb,Qc)

hola = Q_s(0.004, 0.003, 0.003, 0.01)
